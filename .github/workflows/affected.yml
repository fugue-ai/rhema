name: Affected Projects Pipeline

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
    inputs:
      run_all:
        description: 'Run all projects (ignore affected)'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: info

jobs:
  setup:
    uses: ./.github/workflows/setup.yml
    with:
      rust-version: '1.88'
      rust-components: 'rustfmt,clippy'
      fetch-depth: '0'
      run-all: ${{ github.event.inputs.run_all || 'false' }}

  affected-test:
    name: Test Affected Projects
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-projects-json) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.14.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          .nx/cache
        key: ${{ runner.os }}-cargo-1.88-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-1.88-
          
    - name: Test project ${{ matrix.project }}
      run: npx nx test ${{ matrix.project }}
      
    - name: Check project ${{ matrix.project }}
      run: npx nx check ${{ matrix.project }}
      
    - name: Clippy project ${{ matrix.project }}
      run: npx nx clippy ${{ matrix.project }}

  affected-build:
    name: Build Affected Projects
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-projects-json) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.14.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          .nx/cache
        key: ${{ runner.os }}-cargo-1.88-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-1.88-
          
    - name: Build project ${{ matrix.project }}
      run: npx nx build:release ${{ matrix.project }}
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project }}-build
        path: target/release/
        retention-days: 7

  affected-format-check:
    name: Format Check Affected Projects
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-projects-json) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.14.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          .nx/cache
        key: ${{ runner.os }}-cargo-1.88-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-1.88-
          
    - name: Format check project ${{ matrix.project }}
      run: npx nx fmt:check ${{ matrix.project }}

  summary:
    name: Affected Projects Summary
    runs-on: ubuntu-latest
    needs: [setup, affected-test, affected-build, affected-format-check]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate summary
      run: |
        echo "## Affected Projects Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Affected Projects:" >> $GITHUB_STEP_SUMMARY
        echo "${{ needs.setup.outputs.affected-projects }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Jobs Status:" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.affected-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Builds: ${{ needs.affected-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Format Checks: ${{ needs.affected-format-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.affected-test.result }}" == "success" && "${{ needs.affected-build.result }}" == "success" && "${{ needs.affected-format-check.result }}" == "success" ]]; then
          echo "✅ All affected project checks passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some checks failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
        fi 