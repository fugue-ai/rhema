version: '3.8'

services:
  # Rhema Service
  rhema:
    build:
      context: ..
      dockerfile: infra/Dockerfile
    container_name: rhema-service
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - RHEMA_ENV=production
      - RHEMA_DATA_DIR=/app/data
      - RHEMA_CACHE_DIR=/app/cache
      - RHEMA_LOG_DIR=/app/logs
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_URL=http://prometheus:9090
      - JAEGER_URL=http://jaeger:14268
    volumes:
      - rhema_data:/app/data
      - rhema_cache:/app/cache
      - rhema_logs:/app/logs
      - ../repos:/app/repos:ro
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - prometheus
      - jaeger
    networks:
      - rhema-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: rhema-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - rhema-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: rhema-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rhema-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: rhema-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - rhema-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: rhema-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - rhema-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: rhema-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - rhema-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: rhema-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - rhema-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx for load balancing
  nginx:
    image: nginx:alpine
    container_name: rhema-nginx
    restart: unless-stopped
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - rhema
    networks:
      - rhema-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

volumes:
  rhema_data:
  rhema_cache:
  rhema_logs:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  rhema-network:
    driver: bridge 